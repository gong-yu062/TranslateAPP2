@page "/translate"
@using System.ComponentModel.DataAnnotations
@inject TranslationService TranslateService
@using TranslateApp
@using System.Text.Json
@inject HttpClient Http
...

<h1>Translate Language</h1>

<EditForm Model="TranslationInput" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="textToTranslate">Text to Translate:</label>
        <InputTextArea id="textToTranslate" @bind-Value="TranslationInput.TextToTranslate" class="form-control" />
    </div>

    <div class="form-group">
        <label for="targetLanguage">Target Language:</label>
        <InputSelect id="targetLanguage" @bind-Value="TranslationInput.TargetLanguage" class="form-control">
            @foreach (var language in Languages)
            {
                <option value="@language.Code">@language.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Translate</button>

</EditForm>

@if (!string.IsNullOrEmpty(TranslatedText))
{
    <div class="alert alert-success mt-3" role="alert">
        Translated Text: @TranslatedText
    </div>
}

@code {

    public class Language
    {
        public string Name { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
    }
    private string TranslatedText { get; set; } = string.Empty;

    private TranslationInputModel TranslationInput = new TranslationInputModel();

    private List<Language> Languages = new List<Language>
    {
        new Language { Name = "English", Code = "en" },
        new Language { Name = "Spanish", Code = "es" },
        new Language { Name = "French", Code = "fr" },
        new Language { Name = "German", Code = "de" },
        new Language { Name = "Italian", Code = "it" },
        new Language { Name = "Japanese", Code = "ja" },
        new Language { Name = "Korean", Code = "ko" },
        new Language { Name = "Portuguese", Code = "pt" },
        new Language { Name = "Russian", Code = "ru" },
        new Language { Name = "Chinese (Simplified)", Code = "zh-CN" },
        new Language { Name = "Chinese (Traditional)", Code = "zh-TW" }

    };


}



@code {


    private async Task HandleValidSubmit()
    {

        TranslationInputModel inputModel = new TranslationInputModel
            {
                TextToTranslate = TranslationInput.TextToTranslate,
                TargetLanguage = TranslationInput.TargetLanguage
            };

        // Check if the input is valid
        if (TranslationInput != null && !string.IsNullOrEmpty(TranslationInput.TextToTranslate) && !string.IsNullOrEmpty(TranslationInput.TargetLanguage))
        {
            try
            {
                // Call the translation service to translate the text
                //  string translatedText = await TranslationService.TranslateTextAsync(inputModel);

                // Call the translation service to translate the text
                var translatedText = await TranslateService.TranslateTextAsync(inputModel);
                // Update the translated text



            }
            catch (Exception ex)
            {
                // Handle any errors that occur during translation
                // You can display an error message or log the exception
                Console.WriteLine($"Translation error: {ex.Message}");
            }
        }
    }



}




